{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "getting_started": {
        "ownKey": "getting_started",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "getting_started",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/getting_started"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "experimental",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/experimental"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "setup",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/setup"
          },
          "description": "",
          "title": "Getting started",
          "content": "<p>This page provides a quick overview on getting started with Acorn.\nBe sure to have the necessary dependencies included as shown in\n<a href=\"https://nhaarman.github.io/Acorn/wiki/setup\">Setup<\/a>.<\/p>\n<p>Acorn provides several helper classes that can get you started quicky.\nThe easiest way is to have your main Activity extend from\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivity\">AcornActivity<\/a> or <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornAppCompatActivity\">AcornAppCompatActivity<\/a>\nand implement the <code>provideNavigatorProvider<\/code> method:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"k\">object<\/span>&nbsp;<span class=\"nc\">MyNavigatorProvider<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorProvider<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"cm\">/*&nbsp;...&nbsp;*/<\/span>&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MainActivity<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">AcornActivity<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">provideNavigatorProvider<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorProvider<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyNavigatorProvider<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">8&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>If you can't or don't want to extend from AcornActivity, you can use the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivityDelegate\">AcornActivityDelegate<\/a> class.<\/p>\n<h3 id=\"scenecontainerviewcontroller\">Scene/Container/ViewController<\/h3>\n<p>You can create a very simple <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> to get started by\nimplementing the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BaseSavableScene\">BaseSavableScene<\/a> class and implementing the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/presentation/ProvidesView\">ProvidesView<\/a> interface:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Container<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyViewController<\/span><span class=\"p\">(<\/span><span class=\"k\">override<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">view<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">View<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">RestorableViewController<\/span><span class=\"p\">,<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">BaseSavableScene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;(<\/span><span class=\"k\">null<\/span><span class=\"p\">),<\/span>&nbsp;<span class=\"n\">ProvidesView<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">createViewController<\/span><span class=\"p\">(<\/span><span class=\"n\">parent<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">ViewGroup<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">ViewController<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">layout<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">LayoutInflater<\/span><span class=\"p\">.<\/span><span class=\"n\">from<\/span><span class=\"p\">(<\/span><span class=\"n\">parent<\/span><span class=\"p\">.<\/span><span class=\"n\">context<\/span><span class=\"p\">)<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">.<\/span><span class=\"n\">inflate<\/span><span class=\"p\">(<\/span><span class=\"n\">R<\/span><span class=\"p\">.<\/span><span class=\"n\">layout<\/span><span class=\"p\">.<\/span><span class=\"n\">my_scene<\/span><span class=\"p\">,<\/span>&nbsp;<span class=\"n\">parent<\/span><span class=\"p\">,<\/span>&nbsp;<span class=\"k\">false<\/span><span class=\"p\">)<\/span>&nbsp;<br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyViewController<\/span><span class=\"p\">(<\/span><span class=\"n\">layout<\/span><span class=\"p\">)<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>Passing <code>null<\/code> to the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BaseSavableScene\">BaseSavableScene<\/a> constructor basically\nimplies the Scene does not support state restoration.<br />\nSee <a href=\"https://nhaarman.github.io/Acorn/wiki/scenes\">Scenes<\/a> for more information on how to create Scenes.<\/p>\n<h3 id=\"navigator\">Navigator<\/h3>\n<p>The simplest of Navigators is one that extends the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SingleSceneNavigator\">SingleSceneNavigator<\/a> class:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyNavigator<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SingleSceneNavigator<\/span><span class=\"p\">(<\/span><span class=\"k\">null<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">createScene<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">?)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyScene<\/span><span class=\"p\">()<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>Passing <code>null<\/code> to the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SingleSceneNavigator\">SingleSceneNavigator<\/a> constructor basically\nimplies the Navigator does not support state restoration.<br />\nSee <a href=\"https://nhaarman.github.io/Acorn/wiki/navigators\">Navigators<\/a> for more information on how to create Navigators.<\/p>\n<h3 id=\"navigatorprovider\">NavigatorProvider<\/h3>\n<p>You will need to implement the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/navigation/NavigatorProvider\">NavigatorProvider<\/a> interface to\nlet Acorn know which <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> to use.<br />\nThe <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/navigation/AbstractNavigatorProvider\">AbstractNavigatorProvider<\/a> class provides a base\nimplementation you can use:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"k\">object<\/span>&nbsp;<span class=\"nc\">MyNavigatorProvider<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">AbstractNavigatorProvider<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyNavigator<\/span><span class=\"p\">&gt;()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">createNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyNavigator<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyNavigator<\/span><span class=\"p\">()<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/navigation/NavigatorProvider\">NavigatorProvider<\/a> needs to be cached between Activity instances.<\/p>\n<p>See <a href=\"navigators\">Navigators<\/a> for more information.<\/p>\n<h2 id=\"configuration\">Configuration<\/h2>\n<p>The setup in the previous section falls back to the default configuration Acorn\nprovides.\nThere are a couple of things you can customize.<\/p>\n<h3 id=\"viewcontrollerfactory\">ViewControllerFactory<\/h3>\n<p>By default, Acorn relies on Scenes implementing the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/presentation/ViewControllerFactory\">ViewControllerFactory<\/a> interface for creating\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/presentation/ViewController\">ViewController<\/a> instances.\nYou can also supply your own ViewControllerFactory instance to Acorn by\noverriding the <code>provideViewControllerFactory<\/code> function in\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivity\">AcornActivity<\/a>, or passing it to the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivityDelegate\">AcornActivityDelegate<\/a>.<\/p>\n<p>See <a href=\"viewcontrollerfactories\">ViewControllerFactories<\/a> for more information on\ncreating ViewControllerFactories.<\/p>\n<h3 id=\"transitionfactory\">TransitionFactory<\/h3>\n<p>Acorn will use default transition animations to animate transition between\nScenes.\nIf you want to provide custom transition animations, you need to implement the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/transition/TransitionFactory\">TransitionFactory<\/a> interface and supply it to Acorn by overriding\nthe <code>provideTransitionFactory<\/code> function in <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivity\">AcornActivity<\/a>, or\npassing it to the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivityDelegate\">AcornActivityDelegate<\/a>.<\/p>\n<p>See <a href=\"transition_animations\">Transition Animations<\/a> for more information on\ncreating TransitionFactories.<\/p>\n<h3 id=\"activitycontrollerfactory\">ActivityControllerFactory<\/h3>\n<p>If your application needs to start external Activities you need to implement the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/presentation/ActivityControllerFactory\">ActivityControllerFactory<\/a> interface and supply it to Acorn.\nYou can do this by overriding the <code>provideActivityControllerFactory<\/code> function in\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivity\">AcornActivity<\/a>, or by passing it to the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/android/AcornActivityDelegate\">AcornActivityDelegate<\/a>.<\/p>\n"
        }]
      },
      "scenes": {
        "ownKey": "scenes",
        "childrenPages": {
          "base_implementations": {
            "ownKey": "base_implementations",
            "ownPages": [{
              "reference": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "base_implementations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/base_implementations"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "navigators",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators"
              },
              "previous": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "state_saving",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/state_saving"
              },
              "description": "",
              "title": "Base implementations",
              "content": "<p>The samples in the previous article show how you can create\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scenes<\/a> with just the basic interfaces, but there is a\nlot of boilerplate setup taking place.<br />\nFortunately, there are some base implementations that take some of this\nboilerplate out of your hands.<\/p>\n<h3 id=\"basicscene1\"><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BasicScene\">BasicScene<\/a><sup>1<\/sup><\/h3>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BasicScene\">BasicScene<\/a> is a very simple abstract Scene class that\nprovides a handle to the currently attached view, and it automatically saves and\nrestores the view hierarchy state between subsequent <code>attach<\/code> calls.\nWe can take our <code>attach<\/code>  / <code>detach<\/code> example from before and re-implement it\nusing the BasicScene class:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Container<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">locationProvider<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">LocationProvider<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><span class=\"p\">):<\/span>&nbsp;<span class=\"n\">BasicScene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">listener<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">location<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Location<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">-&gt;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">currentView<\/span><span class=\"o\">?.<\/span><span class=\"n\">location<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">location<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStart<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">locationProvider<\/span><span class=\"p\">.<\/span><span class=\"n\">registerLocationUpdates<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">)<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStop<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">locationProvider<\/span><span class=\"p\">.<\/span><span class=\"n\">unregisterLocationUpdates<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">)<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>We don't have to manually keep a reference to the view anymore, and we don't\nhave to worry about releasing the reference since that is done for us now.<\/p>\n<h3 id=\"basesavablescene1\"><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BaseSavableScene\">BaseSavableScene<\/a><sup>1<\/sup><\/h3>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BaseSavableScene\">BaseSavableScene<\/a> class is an abstract class that handles the\nview hierarchy state saving for you, and implements <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a>.\nIf we take the sample from Scene state restoration before and re-implement it\nusing the BaseSavableScene class, we get the following:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">RestorableContainer<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">userId<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">,<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">BaseSavableScene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">saveInstanceState<\/span><span class=\"p\">():<\/span>&nbsp;<span class=\"n\">SceneState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"k\">super<\/span><span class=\"p\">.<\/span><span class=\"n\">saveInstanceState<\/span><span class=\"p\">().<\/span><span class=\"n\">also<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">it<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;user_id&quot;<\/span><span class=\"p\">]<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">userId<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">companion<\/span>&nbsp;<span class=\"k\">object<\/span>&nbsp;<span class=\"err\">{<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">create<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyScene<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;user_id&quot;<\/span><span class=\"p\">],<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">)<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>We now only have to deal with saving and restoring our <code>userId<\/code>, and let the\nBaseSavableScene handle the rest.<\/p>\n<h3 id=\"rxscene2\">RxScene<sup>2<\/sup><\/h3>\n<p>The RxScene abstract class extends the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BaseSavableScene\">BaseSavableScene<\/a> class and provides helper functions for working\nwith Rx streams.<\/p>\n<h3 id=\"lifecyclescene2\">LifecycleScene<sup>2<\/sup><\/h3>\n<p>The LifecycleScene abstract class extends the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/BaseSavableScene\">BaseSavableScene<\/a> class and implements the\n<code>androidx.lifecycle.LifecycleOwner<\/code> interface.<\/p>\n<hr />\n<p>1: This class is available in the <code>ext-acorn<\/code> artifact.<br />\n2: This class is available in the <code>ext-acorn-rx<\/code> artifact.<br />\n3: This class is available in the <code>ext-acorn-android-lifecycle<\/code> artifact.<\/p>\n"
            }]
          },
          "about": {
            "ownKey": "about",
            "ownPages": [{
              "reference": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "about",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/about"
              },
              "next": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "interface",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/interface"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "scenes",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes"
              },
              "description": "",
              "title": "About Scenes",
              "content": "<p>In a typical mobile application, the user can navigate from one destination to\nanother.\nEach of these destinations can be regarded as a \u2018screen\u2019: a set of components\nthat fulfill a very specific use case.\nFor example, the main screen of a Twitter client may show a list of tweets to\nthe user.<\/p>\n<p>In Acorn these screens are represented by <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a>\nobjects<sup>1<\/sup>.\nA Scene represents a destination in an application the user can navigate to.\nA Scene is usually a screen in your application, but may also be a dialog or\neven something entirely else.\nA single traditional 'screen' could perhaps even consist of two separate Scenes,\nfor example when you enter an 'edit mode' for the screen.<\/p>\n<h2 id=\"lifecycle\">Lifecycle<\/h2>\n<p>People seem to have difficulties grasping the concept of lifecycles, or how to\ndeal with it.\nHowever, these lifecycles are very useful, and quite necessary to actually be\nable to do something.\nWhen a screen becomes active in the application, it may want to start calling\nuse cases in the business layer to retrieve some data.\nWhen it becomes visible to the user, it may want to register listeners to the UI\nto react to events.\nWhen it is replaced by another screen, it may need to stop listening for\nupdates, and when it is destroyed (by popping it from a back stack for example),\nit may need to do some cleanup.\nLifecycle callbacks are an excellent way to go and handle these scenarios.<\/p>\n<p>The Activity indeed has a somewhat complicated lifecycle in the sense that it\ngets destroyed on configuration changes, such as device rotation.\nFor Scenes this is not the case: the UI gets attached to the container when\navailable, and detached when it becomes unavailable again.\nWhen the device gets rotated from portrait to landscape, this can be seen as the\ndisappearance of the portrait UI, and the appearance of the landscape UI.<\/p>\n<h3 id=\"scene-lifecycle\">Scene lifecycle<\/h3>\n<p>In the basis, a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> can be 'started' or 'stopped', and\ngenerally there is only one active Scene at a time.\nTo be able to interact with the user, a Scene can define a\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Container\">Container<\/a> type that can be attached to it.\nThis Container represents the View through which a Scene can display data to the\nuser and receive input events.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">V<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStart<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">attach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">V<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">detach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">V<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStop<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onDestroy<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>The lifecycle of a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> is very simple:<\/p>\n<ul>\n<li>'stopped'  : The Scene is dormant, waiting to be started or to be destroyed.<\/li>\n<li>'started'  : The Scene is started.<\/li>\n<li>'destroyed': The Scene is destroyed and will not be started anymore<\/li>\n<\/ul>\n<p>During the lifetime of a Scene it can go from 'stopped' to 'started' and vice\nversa multiple times, until it reaches the 'destroyed' state.<\/p>\n<p><img src=\"https://nhaarman.github.io/Acorn/assets/media/scene_lifecycle.png\" alt=\"\" /><\/p>\n<p>Next to this, the Scene provides the <code>attach<\/code> and <code>detach<\/code> methods through which\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Container\">Container<\/a> instances can be attached and detached.\nDuring the lifetime of a Scene, it is possible that multiple Containers are\nattached to it, though only one at a time.<\/p>\n<p>For example, a simple &quot;Hello World!&quot; screen could be implemented as follows:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">HelloWorldContainer<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Container<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">var<\/span>&nbsp;<span class=\"py\">text<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><span class=\"p\">}<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">HelloWorldScene<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">HelloWorldContainer<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">attach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">HelloWorldContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">v<\/span><span class=\"p\">.<\/span><span class=\"n\">text<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"s\">&quot;Hello&nbsp;World!&quot;<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<h2 id=\"events\">Events<\/h2>\n<p>Often, certain events happen in a screen that should cause a transition to\nanother screen.\nThis could be a user having logged in successfully, or pressing on an item to\nview its detail screen.\nA <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> however should have no knowledge of navigation flow,\nmeaning it cannot tell the system to go to another Scene.\nInstead, it can notify the component that <em>does<\/em> have control over navigation\nflow that an event has happened, like &quot;this item was clicked!&quot;.<\/p>\n<p>A typical pattern for this is to define an interface for these events, and let\nthe Scene accept an instance of this interface in its constructor.\nThe listener can then act on these events accordingly, such as navigating to\nanother Scene.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">LoginScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">loginInteractor<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">LoginInteractor<\/span><span class=\"p\">,<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">listener<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Events<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">LoginContainer<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"cm\">/*&nbsp;...&nbsp;*/<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">doLogin<\/span><span class=\"p\">(<\/span><span class=\"n\">username<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">,<\/span>&nbsp;<span class=\"n\">password<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">loginInteractor<\/span><span class=\"p\">.<\/span><span class=\"n\">login<\/span><span class=\"p\">(<\/span><span class=\"n\">username<\/span><span class=\"p\">,<\/span>&nbsp;<span class=\"n\">password<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">user<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">User<\/span>&nbsp;<span class=\"p\">-&gt;<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">listener<\/span><span class=\"p\">.<\/span><span class=\"n\">onLoggedIn<\/span><span class=\"p\">(<\/span><span class=\"n\">user<\/span><span class=\"p\">)<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"cm\">/**&nbsp;Called&nbsp;when&nbsp;this&nbsp;Scene&nbsp;is&nbsp;done&nbsp;logging&nbsp;in&nbsp;given&nbsp;user.&nbsp;*/<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onLoggedIn<\/span><span class=\"p\">(<\/span><span class=\"n\">user<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">User<\/span><span class=\"p\">)<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>For more information about navigation, see\n<a href=\"https://nhaarman.github.io/Acorn/wiki/navigators\">Navigators<\/a>.<\/p>\n<h2 id=\"saving-and-restoring-state\">Saving and restoring state<\/h2>\n<p>It is possible that an application is killed while the user has navigated to a\nparticular <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a>.\nWhen the user returns to the application it is expected that the application\nrestores to the state it was left in.\nThis means that it is necessary to be able to restore Scenes from a serialized\nstate.<\/p>\n<p>For 'static' Scenes that take no arguments (like our <code>HelloWorldScene<\/code> above)\nthis usually is no problem.\nScenes that do take arguments or have other state they wish to preserve need to\nimplement the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a> interface.\nThis introduces a <code>saveInstanceState<\/code> function, allowing the Scene to persist its\nstate to a serializable format.\nWhen the Scene needs to be restored, this serialized state will then be provided.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">ShowItemScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">itemId<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Long<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">ShowItemContainer<\/span><span class=\"p\">&gt;,<\/span>&nbsp;<span class=\"n\">StateSaveable<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">saveInstanceState<\/span><span class=\"p\">():<\/span>&nbsp;<span class=\"n\">SceneState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">sceneState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">it<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;item_id&quot;<\/span><span class=\"p\">]<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">itemId<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">companion<\/span>&nbsp;<span class=\"k\">object<\/span>&nbsp;<span class=\"err\">{<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">create<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">):<\/span>&nbsp;<span class=\"n\">ShowItemScene<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">ShowItemScene<\/span><span class=\"p\">(<\/span><span class=\"n\">itemId<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">state<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;item_id&quot;<\/span><span class=\"p\">])<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<h3 id=\"container-state\">Container state<\/h3>\n<p><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Container\">Container<\/a> state (or view state) saving and restoring is a very\nimportant topic for mobile applications.\nWhenever a user has entered text or scrolled a list to a particular position and\nnavigates away from the screen to later return again, it is expected that the\nentered text or the scroll position is still there.<\/p>\n<p>Next to saving their own state, Scenes are also responsible for saving and\nrestoring the Container states.\nSince multiple Containers can be attached to and detached from the Scene, their\nstate needs to be saved and restored between the Container instances as well.\nThis can easily be done by saving the Container state in the <code>detach<\/code> method,\nand restoring it in the <code>attach<\/code> method.<\/p>\n<p>Finally, when saving the Scene state, the most recent container state needs to\nbe persisted as well.\nThe <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a> class provides a base implementation that\nhandles all this.<\/p>\n<h2 id=\"scenes-vs-activities-or-fragments\">Scenes vs. Activities or Fragments<\/h2>\n<p>In a sense, Scenes are similar to Activities or Fragments: when used as a\nprimary navigational unit, they both represent a screen in an application.<\/p>\n<p>A couple of key differences are:<\/p>\n<ul>\n<li>Scenes are not created by the system, but can accept dependencies in their\nconstructors;<\/li>\n<li>Scenes only have one responsibility: connecting the UI to the business logic.\nThey do not:\n<ul>\n<li>Create any views<\/li>\n<li>Control application flow directly<\/li>\n<li>Have system callbacks (like permissions)<\/li>\n<\/ul>\n<\/li>\n<li>Scenes always survive configuration changes.<\/li>\n<\/ul>\n<hr />\n<p>1: Note that Acorn's <code>Scene<\/code> objects are a completely different concept than Android's <a href=\"https://developer.android.com/reference/android/transition/Scene\">Scenes used for transitions<\/a>.<\/p>\n"
            }]
          },
          "interface": {
            "ownKey": "interface",
            "ownPages": [{
              "reference": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "interface",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/interface"
              },
              "next": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "state_saving",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/state_saving"
              },
              "previous": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "about",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/about"
              },
              "description": "",
              "title": "The Scene interface",
              "content": "<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\"><code>Scene<\/code><\/a> interface describes the\nbasic functionality for a screen: it supplies a <code>SceneKey<\/code> property that can be\nused to identify separate instances.<br />\nNext to that, it provides several lifecycle describing methods:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">V<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">key<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneKey<\/span>&nbsp;<span class=\"k\">get<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">SceneKey<\/span><span class=\"p\">.<\/span><span class=\"n\">from<\/span><span class=\"p\">(<\/span><span class=\"n\">javaClass<\/span><span class=\"p\">)<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStart<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStop<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onDestroy<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">attach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">V<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">detach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">V<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{}<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>The first three methods describe the Scene's own lifecycle:<\/p>\n<ul>\n<li><code>onStart()<\/code>: Called when the Scene is started;<\/li>\n<li><code>onStop()<\/code>: Called when the Scene is stopped;<\/li>\n<li><code>onDestroy()<\/code>: Called when the Scene gets destroyed.<\/li>\n<\/ul>\n<p>To be able to access the user interface, it also provides the <code>attach<\/code> and\n<code>detach<\/code> methods:<\/p>\n<ul>\n<li><code>attach(V)<\/code>: Attaches the Container to the Scene;<\/li>\n<li><code>detach(V)<\/code>: Detaches the Container from the Scene;<\/li>\n<\/ul>\n<h4 id=\"onstart--onstop\"><code>onStart<\/code> / <code>onStop<\/code><\/h4>\n<p>These two methods mark the active stage of the Scene.\nYou could choose to register to location updates when the Scene becomes active,\nand cancel the registration when the Scene becomes inactive:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Container<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">locationProvider<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">LocationProvider<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><span class=\"p\">):<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">listener<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">location<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Location<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">-&gt;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;Process&nbsp;location&nbsp;update<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStart<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">locationProvider<\/span><span class=\"p\">.<\/span><span class=\"n\">registerLocationUpdates<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">)<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStop<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">locationProvider<\/span><span class=\"p\">.<\/span><span class=\"n\">unregisterLocationUpdates<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">)<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<h4 id=\"attach---detach\"><code>attach<\/code>  / <code>detach<\/code><\/h4>\n<p>These two methods give you access to the user interface.\nYou can grab a reference to the Container instance in <code>attach<\/code> to be able\nto pass data to it.\nHowever, you must make sure to remove the reference in <code>detach<\/code> to prevent\nmemory leaks.\nFor example, if we expand on the previous example:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Container<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">var<\/span>&nbsp;<span class=\"py\">location<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Location<\/span><span class=\"p\">?<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><span class=\"p\">}<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">locationProvider<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">LocationProvider<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><span class=\"p\">):<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">var<\/span>&nbsp;<span class=\"py\">view<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">listener<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">location<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Location<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">-&gt;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">view<\/span><span class=\"o\">?.<\/span><span class=\"n\">location<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">location<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStart<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">locationProvider<\/span><span class=\"p\">.<\/span><span class=\"n\">registerLocationUpdates<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">)<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">attach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"n\">view<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">v<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><br><a name=\"line-24\"><\/a><span class=\"lineno\">24&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">detach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-25\"><\/a><span class=\"lineno\">25&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">this<\/span><span class=\"p\">.<\/span><span class=\"n\">view<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><br><a name=\"line-26\"><\/a><span class=\"lineno\">26&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-27\"><\/a><span class=\"lineno\">27&nbsp;<\/span><br><a name=\"line-28\"><\/a><span class=\"lineno\">28&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStop<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-29\"><\/a><span class=\"lineno\">29&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">locationProvider<\/span><span class=\"p\">.<\/span><span class=\"n\">unregisterLocationUpdates<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">)<\/span><br><a name=\"line-30\"><\/a><span class=\"lineno\">30&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-31\"><\/a><span class=\"lineno\">31&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>The implementation above will start to listen to location updates as soon as the\nScene becomes active.\nWhen a view is attached, the location updates will be passed on to it.\nWhen the view is detached, the reference to the view is removed, but the Scene\nwill still listen to location updates.\nFinally, When the Scene becomes inactive, it will stop listening to location\nupdates as well.<\/p>\n<h4 id=\"ondestroy\"><code>onDestroy()<\/code><\/h4>\n<p><code>onDestroy()<\/code> will be called once and only once at the end of the lifetime of\nthe Scene.\nWhen this method is called, the Scene must be regarded as destroyed and no more\ncalls to its lifecycle methods will be made.\nYou can use this callback to release resources if you already haven't done so.<\/p>\n"
            }]
          },
          "state_saving": {
            "ownKey": "state_saving",
            "ownPages": [{
              "reference": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "state_saving",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/state_saving"
              },
              "next": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "base_implementations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/base_implementations"
              },
              "previous": {
                "path": "wiki/scenes",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "interface",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/scenes/interface"
              },
              "description": "",
              "title": "Saving state",
              "content": "<p>By default, a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> does not support state saving, nor does it\nsave or restore view hierarchy state such as user input or scroll positions.\nFrom a user's perspective however, it is important that you <em>do<\/em> save your\nScene's state: not only can an Android application be killed at any time after which it\nshould be properly restored, but a lost scroll position on orientation change\ncan also be very annoying.<\/p>\n<h3 id=\"view-hierarchy-state-saving\">View hierarchy state saving<\/h3>\n<p>During the lifetime of a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> it can happen that it receives\nmultiple calls to <code>attach<\/code> and <code>detach<\/code>.\nOften, subsequent calls to <code>attach<\/code> will have fresh instances of the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Container\">Container<\/a> passed to it, losing any view hierarchy state.<\/p>\n<p>The Scene can save and restore the container state between these subsequent\ncalls to <code>attach<\/code> if the Container type implements the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/RestorableContainer\">RestorableContainer<\/a> interface.\nThis interface provides a <code>saveInstanceState<\/code> method and a\n<code>restoreInstanceState<\/code> method, which the Scene can use to restore the container\nstate:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">RestorableContainer<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">var<\/span>&nbsp;<span class=\"py\">containerState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">ContainerState<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">attach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">containerState<\/span><span class=\"o\">?.<\/span><span class=\"n\">let<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">v<\/span><span class=\"p\">.<\/span><span class=\"n\">restoreInstanceState<\/span><span class=\"p\">(<\/span><span class=\"n\">it<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">detach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">containerState<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">v<\/span><span class=\"p\">.<\/span><span class=\"n\">saveInstanceState<\/span><span class=\"p\">()<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>This <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> will now save the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Container\">Container<\/a>'s\ninstance state when it gets detached from the Scene.\nA new Container instance that gets attached to the Scene will receive the\nprevious Container's state and can restore the view hierarchy.<\/p>\n<h3 id=\"scene-state-saving\">Scene state saving<\/h3>\n<p>To have your <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a>'s state saved to prepare for process deaths,\nimplement the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a> interface.\nThis interface provides a <code>saveInstanceState()<\/code> method that will be called at\nappropriate times.<br />\nWhen saving a Scene, you generally want to save as little as possible, but just\nenough to be able to reconstruct it after process death. Think of saving a\n<code>userId<\/code> value, but not the entire <code>User<\/code> instance.<\/p>\n<p>Next to this, you can also choose to save the view hierarchy state with it, if\nthe <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Container\">Container<\/a> supports it:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">RestorableContainer<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">userId<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;,<\/span>&nbsp;<span class=\"n\">SavableScene<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">var<\/span>&nbsp;<span class=\"py\">containerState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">ContainerState<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">attach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">containerState<\/span><span class=\"o\">?.<\/span><span class=\"n\">let<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">v<\/span><span class=\"p\">.<\/span><span class=\"n\">restoreInstanceState<\/span><span class=\"p\">(<\/span><span class=\"n\">it<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">detach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">containerState<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">v<\/span><span class=\"p\">.<\/span><span class=\"n\">saveInstanceState<\/span><span class=\"p\">()<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">saveInstanceState<\/span><span class=\"p\">():<\/span>&nbsp;<span class=\"n\">SceneState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">sceneState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">it<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;user_id&quot;<\/span><span class=\"p\">]<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">userId<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">it<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;container_state&quot;<\/span><span class=\"p\">]<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">containerState<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>This snippet extends the previous snippet by implementing the <code>SavableScene<\/code>\ninterface and overriding the <code>saveInstanceState()<\/code> method.<\/p>\n<h3 id=\"scene-state-restoration\">Scene state restoration<\/h3>\n<p>After a process death, a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> class can ask you to restore\nyour <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> from a saved state\n(see <a href=\"https://nhaarman.github.io/Acorn/wiki/navigators\">Navigators<\/a>).<br />\nIf your Scene implements <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a>, you will be passed the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/state/SceneState\">SceneState<\/a> instance that you returned from <code>saveInstanceState()<\/code>.\nYou can then pull out everything you need to be able to restore the Scene.<\/p>\n<p>If we again expand on the previous example, we can add restoration support by\nimplementing a <code>create<\/code> method in the Scene's <code>companion object<\/code> as follows:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">MyContainer<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">RestorableContainer<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">userId<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">,<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">MyContainer<\/span><span class=\"p\">&gt;,<\/span>&nbsp;<span class=\"n\">SavableScene<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">var<\/span>&nbsp;<span class=\"py\">containerState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">ContainerState<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">savedState<\/span><span class=\"o\">?.<\/span><span class=\"k\">get<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;container_state&quot;<\/span><span class=\"p\">)<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">attach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">containerState<\/span><span class=\"o\">?.<\/span><span class=\"n\">let<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">v<\/span><span class=\"p\">.<\/span><span class=\"n\">restoreInstanceState<\/span><span class=\"p\">(<\/span><span class=\"n\">it<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">detach<\/span><span class=\"p\">(<\/span><span class=\"n\">v<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyContainer<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">containerState<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">v<\/span><span class=\"p\">.<\/span><span class=\"n\">saveInstanceState<\/span><span class=\"p\">()<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">saveInstanceState<\/span><span class=\"p\">():<\/span>&nbsp;<span class=\"n\">SceneState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">sceneState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">it<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;user_id&quot;<\/span><span class=\"p\">]<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">userId<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">it<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;container_state&quot;<\/span><span class=\"p\">]<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">containerState<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-24\"><\/a><span class=\"lineno\">24&nbsp;<\/span><br><a name=\"line-25\"><\/a><span class=\"lineno\">25&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">companion<\/span>&nbsp;<span class=\"k\">object<\/span>&nbsp;<span class=\"err\">{<\/span><br><a name=\"line-26\"><\/a><span class=\"lineno\">26&nbsp;<\/span><br><a name=\"line-27\"><\/a><span class=\"lineno\">27&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">create<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyScene<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-28\"><\/a><span class=\"lineno\">28&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-29\"><\/a><span class=\"lineno\">29&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;user_id&quot;<\/span><span class=\"p\">],<\/span><br><a name=\"line-30\"><\/a><span class=\"lineno\">30&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><br><a name=\"line-31\"><\/a><span class=\"lineno\">31&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">)<\/span><br><a name=\"line-32\"><\/a><span class=\"lineno\">32&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-33\"><\/a><span class=\"lineno\">33&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-34\"><\/a><span class=\"lineno\">34&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>Now, we have restored our <code>userId<\/code> from the saved state, as well as any view\nstate that was saved with it.<\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "scenes",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/scenes"
          },
          "next": {
            "path": "wiki/scenes",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "about",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/scenes/about"
          },
          "description": "",
          "title": "Scenes",
          "content": "<p>Scenes are the basic building blocks of your application's navigation flow.<br />\nThey represent very simple user-faced states in the application, such as a\nregistration page or a loading screen.<\/p>\n<p>On these pages you can find out all about Scenes:<\/p>\n<ul>\n<li><a href=\"scenes/about\">About Scenes<\/a><\/li>\n<li><a href=\"scenes/interface\">The Scene interface<\/a><\/li>\n<li><a href=\"scenes/state_saving\">Saving state<\/a><\/li>\n<li><a href=\"scenes/base_implementations\">Base implementations<\/a><\/li>\n<\/ul>\n"
        }]
      },
      "setup": {
        "ownKey": "setup",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "setup",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/setup"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "getting_started",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/getting_started"
          },
          "previous": {
            "path": "wiki/userinterface",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "about",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/userinterface/about"
          },
          "description": "",
          "title": "Setup",
          "content": "<p>Acorn is tactically divided in several modules to be able to separate different\nconcerns from each other. Core artifacts define the general contracts of Acorn,\nwhile extension artifacts provide the implementations.<\/p>\n<h2 id=\"easy-setup-maven-central\">Easy setup <a href=\"https://maven-badges.herokuapp.com/maven-central/com.nhaarman.acorn/acorn\"><img src=\"https://maven-badges.herokuapp.com/maven-central/com.nhaarman.acorn/acorn/badge.png\" alt=\"Maven Central\" /><\/a><\/h2>\n<p>Acorn is hosted on Maven Central.<\/p>\n<p>To get started quickly, you can include the <code>ext-acorn-android<\/code> dependency,\nwhich includes the necessary base to create an app.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"n\">implementation<\/span>&nbsp;<span class=\"s2\">&quot;com.nhaarman.acorn.ext:acorn-android:x.x.x&quot;<\/span><br><\/pre><\/div><br>\n<p>If you use <code>androidx.appcompat<\/code>, you can use <code>ext-acorn-android-appcompat<\/code> instead:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"n\">implementation<\/span>&nbsp;<span class=\"s2\">&quot;com.nhaarman.acorn.ext:acorn-android-appcompat:x.x.x&quot;<\/span><br><\/pre><\/div><br>\n<p>Using the dependencies above will transitively pull all other dependencies you\nneed as well.<\/p>\n<h2 id=\"advanced-setup\">Advanced setup<\/h2>\n<p>As mentioned before, Acorn is divided in several modules.<\/p>\n<h3 id=\"core\">Core<\/h3>\n<p>The core modules provide the general contracts of Acorn as interfaces and simple\ndata classes.<\/p>\n<table>\n<thead>\n<tr><th>Artifact<\/th><th>Description<\/th><th>Dependencies<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><code>com.nhaarman.acorn:acorn<\/code><\/td><td>The core library, containing only the interfaces for Acorn without any functionality.<\/td><td>-<\/td><\/tr>\n<tr><td><code>com.nhaarman.acorn:acorn-android<\/code><\/td><td>The core library for Android, containing only the interfaces for working with Acorn on Android.<\/td><td><code>com.nhaarman.acorn:acorn<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"jvm-extensions\">JVM extensions<\/h3>\n<p>The following artifacts build upon the <code>acorn<\/code> artifact and provide some default\nimplementations for <code>Navigator<\/code> and <code>Scene<\/code>:<\/p>\n<table>\n<thead>\n<tr><th>Artifact<\/th><th>Description<\/th><th>Dependencies<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><code>com.nhaarman.acorn.ext:acorn<\/code><\/td><td>The main extension on the Acorn core, providing default implementations.<\/td><td><code>com.nhaarman.acorn:acorn<\/code><\/td><\/tr>\n<tr><td><code>com.nhaarman.acorn.ext:acorn-rx<\/code><\/td><td>An RxJava extension for Acorn.<\/td><td><code>com.nhaarman.acorn:acorn<\/code><\/td><\/tr>\n<tr><td><code>com.nhaarman.acorn.ext:acorn-testing<\/code><\/td><td>Provides testing utilities for JVM tests.<\/td><td><code>com.nhaarman.acorn:acorn<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"android-extensions\">Android extensions<\/h3>\n<p>Finally, the following artifacts provide the necessary implementations to make\nAcorn work on Android:<\/p>\n<table>\n<thead>\n<tr><th>Artifact<\/th><th>Description<\/th><th>Dependencies<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><code>com.nhaarman.acorn.ext:acorn-android<\/code><\/td><td>The main extension on the Acorn-Android core, providing default implementations.<\/td><td><code>com.nhaarman.acorn:acorn<\/code><br><code>com.nhaarman.acorn:acorn-android<\/code><\/td><\/tr>\n<tr><td><code>com.nhaarman.acorn.ext:acorn-android-testing<\/code><\/td><td>Provides testing facilities for instrumentation testing with Acorn-Android.<\/td><td><code>com.nhaarman.acorn:acorn<\/code><br><code>com.nhaarman.acorn:acorn-android<\/code><br><code>com.nhaarman.acorn.ext:acorn-android<\/code><\/td><\/tr>\n<tr><td><code>com.nhaarman.acorn.ext:acorn-android-timber<\/code><\/td><td>Provides a <code>TimberLogger<\/code><\/td><td><code>com.nhaarman.acorn:acorn<\/code><br><code>com.nhaarman.acorn.ext:acorn<\/code><\/td><\/tr>\n<tr><td><code>com.nhaarman.acorn.ext:acorn-android-lifecycle<\/code><\/td><td>Provides <code>LifecycleScene<\/code><\/td><td><code>com.nhaarman.acorn:acorn<\/code><br><code>com.nhaarman.acorn.ext:acorn<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n"
        }]
      },
      "navigators": {
        "ownKey": "navigators",
        "childrenPages": {
          "base_implementations": {
            "ownKey": "base_implementations",
            "ownPages": [{
              "reference": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "base_implementations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/base_implementations"
              },
              "next": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "composing_implementations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/composing_implementations"
              },
              "previous": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "state_saving",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/state_saving"
              },
              "description": "",
              "title": "Base implementations",
              "content": "<p>There are some base <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> implementations to help you get started.\nEach of these implementations implement <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SavableNavigator\">SavableNavigator<\/a> to\nallow their state to be saved, and each has their own strategy to do this.<\/p>\n<h3 id=\"singlescenenavigator1\"><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SingleSceneNavigator\">SingleSceneNavigator<\/a><sup>1<\/sup><\/h3>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SingleSceneNavigator\">SingleSceneNavigator<\/a> is a very basic Navigator that is only\nable to host a single <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> during its lifetime, without ever\nnavigating to a different Scene.\nThis class can sometimes come in useful when composing Navigators.<\/p>\n<p>The SingleSceneNavigator provides a single abstract <code>createScene<\/code> method that\nneeds to be overridden, which provides the Scene to use in this Navigator.\nIf the Navigator is restored from a saved state and the Scene implements\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a>, the <code>createScene<\/code> method will be called with the\ninstance that was returned in\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene#method__abstract_fun_saveInstanceState____SceneState\">SavableScene#saveInstanceState<\/a>.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyHelloWorldNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SingleSceneNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">createScene<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">?)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">HelloWorldScene<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">8&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>The SingleSceneNavigator will automatically save its own and the Scene's\ninstance state when necessary, and reconstruct itself from any saved state\npassed to its constructor.<\/p>\n<h3 id=\"replacingnavigator1\"><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/ReplacingNavigator\">ReplacingNavigator<\/a><sup>1<\/sup><\/h3>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/ReplacingNavigator\">ReplacingNavigator<\/a> is a Navigator that can switch between\nseveral different Scenes, but has no back behavior.\nWhen the user presses the back button, the Navigator will always directly finish\nregardless of how many Scenes it has seen.<\/p>\n<p>The ReplacingNavigator provides an abstract method\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/ReplacingNavigator#method__protected_abstract_fun_initialScene____Scene\">initialScene<\/a>\nthat needs to be overridden, which provides the initial Scene to use when not\nrestored from a saved state.\nWhen the ReplacingNavigator is restored from a saved state, this method will not\nbe called.<\/p>\n<p>Instead to support state restoration, this <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/ReplacingNavigator\">ReplacingNavigator<\/a>\nprovides an abstract\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/ReplacingNavigator#method__protected_abstract_fun_instantiateScene_sceneClass__KClass__state__SceneState____Scene\">instantiateScene<\/a>\nmethod which takes in a <code>KClass&lt;Scene&lt;*&gt;&gt;<\/code> and an optional\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/state/SceneState\">SceneState<\/a> instance.\nSince state saving can occur at any time, users of the ReplacingNavigator must\nbe able to handle all Scenes used in it, even if the Scene itself does not\nimplement <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a>.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">ReplacingNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">initialScene<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyFirstScene<\/span><span class=\"p\">()<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onEvent<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">replace<\/span><span class=\"p\">(<\/span><span class=\"n\">MySecondScene<\/span><span class=\"p\">())<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">instantiateScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">sceneClass<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">KClass<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;*&gt;&gt;,<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">state<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">?<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"k\">when<\/span><span class=\"p\">(<\/span><span class=\"n\">sceneClass<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MyFirstScene<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MyFirstScene<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MySecondScene<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MySecondScene<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else<\/span>&nbsp;<span class=\"p\">-&gt;<\/span>&nbsp;<span class=\"n\">error<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Unknown&nbsp;scene&nbsp;class:&nbsp;$sceneClass&quot;<\/span><span class=\"p\">)<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>To switch Scenes in the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/ReplacingNavigator\">ReplacingNavigator<\/a>, the class provides a\n<code>replace<\/code> method.\nWhen calling this method, the ReplacingNavigator will handle the previous and\nnew Scenes' lifecycle methods appropriately and notify any listeners of the\nchange in scenery.<\/p>\n<h3 id=\"stacknavigator1\"><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator\">StackNavigator<\/a><sup>1<\/sup><\/h3>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator\">StackNavigator<\/a> base class is the class you'll feel most\nfamiliar with, as it uses a stack to model its internal state.\nYou can push Scenes on the stack, pop them off, or replace the top Scene with\nanother one.\nPressing the back button will pop the top Scene off the stack.<\/p>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator\">StackNavigator<\/a> provides an abstract method\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator#method__protected_abstract_fun_initialStack____List\">initialStack<\/a>\nthat needs to\nbe overridden, which provides the initial Scene stack to use when not restored\nfrom a saved state.\nWhen the StackNavigator is restored from a saved state, this method will not\nbe called.<\/p>\n<p>Instead to support state restoration, this <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator\">StackNavigator<\/a> provides an\nabstract\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator#method__protected_abstract_fun_instantiateScene_sceneClass__KClass__state__SceneState____Scene\">instantiateScene<\/a>\nmethod which takes in a <code>KClass&lt;Scene&lt;*&gt;&gt;<\/code> and an\noptional <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/state/SceneState\">SceneState<\/a> instance.\nSince state saving can occur at any time, users of the StackNavigator must be\nable to handle all Scenes used in it, even if the Scene itself does not\nimplement <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/SavableScene\">SavableScene<\/a>.\nThe StackNavigator will take care of preserving the order of the stack.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">StackNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">initialStack<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">List<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">listOf<\/span><span class=\"p\">(<\/span><span class=\"n\">MyFirstScene<\/span><span class=\"p\">())<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onEvent<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">push<\/span><span class=\"p\">(<\/span><span class=\"n\">MySecondScene<\/span><span class=\"p\">())<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">instantiateScene<\/span><span class=\"p\">(<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">sceneClass<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">KClass<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;*&gt;&gt;,<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">state<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SceneState<\/span><span class=\"p\">?<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"k\">when<\/span><span class=\"p\">(<\/span><span class=\"n\">sceneClass<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MyFirstScene<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MyFirstScene<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MySecondScene<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MySecondScene<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else<\/span>&nbsp;<span class=\"p\">-&gt;<\/span>&nbsp;<span class=\"n\">error<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Unknown&nbsp;scene&nbsp;class:&nbsp;$sceneClass&quot;<\/span><span class=\"p\">)<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>To manipulate the stack in the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator\">StackNavigator<\/a>, the class\nprovides three methods: <code>push<\/code>, <code>pop<\/code>, and <code>replace<\/code>.\nWhen calling one of these methods, the StackNavigator will handle the Scenes'\nlifecycle methods appropriately and will notify any listeners of the change in\nscenery.<\/p>\n<hr />\n<p>1: This class is available in the <code>ext-acorn<\/code> artifact.<\/p>\n"
            }]
          },
          "advanced": {
            "ownKey": "advanced",
            "childrenPages": {"scene_management": {
              "ownKey": "scene_management",
              "ownPages": [{
                "reference": {
                  "path": "wiki/navigators/advanced",
                  "baseUrl": "https://nhaarman.github.io/Acorn",
                  "fileName": "scene_management",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://nhaarman.github.io/Acorn/wiki/navigators/advanced/scene_management"
                },
                "next": {
                  "path": "wiki",
                  "baseUrl": "https://nhaarman.github.io/Acorn",
                  "fileName": "userinterface",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://nhaarman.github.io/Acorn/wiki/userinterface"
                },
                "previous": {
                  "path": "wiki/navigators",
                  "baseUrl": "https://nhaarman.github.io/Acorn",
                  "fileName": "composing_implementations",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://nhaarman.github.io/Acorn/wiki/navigators/composing_implementations"
                },
                "description": "",
                "title": "Scene management",
                "content": "<p>As <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scenes<\/a>  have absolutely no knowledge of any\nnavigation flow, they will need to notify a component that does of events that\nshould trigger a change in scenery.\nNaturally, a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> is perfect for that.\nThe Navigator can listen to a Scene's events and react accordingly, for example\nby switching to another Scene.<\/p>\n<p>Depending on the way the flow is modelled in the Navigator, the lifecycle of its\nScenes can behave differently.<br />\nIn case of a stack for example, the Scene that is being replaced can either be\nmade inactive or be destroyed depending on whether a new Scene is pushed onto\nthe stack, or whether the Scene is popped off of the stack.\nA Navigator that does not use a back stack may have completely different behavior\nwith respect to its Scene's lifecycles.\nThis means that the Navigator is completely responsible for the lifecycle of the\nScenes, and <em>must<\/em> make the proper calls at the proper times.<\/p>\n<p>When implementing your own Navigator instance, a few general guidelines can be\nfollowed:<\/p>\n<ul>\n<li>Scenes need to be started and stopped.\nWhen a Scene becomes the active Scene, a call to its <code>onStart<\/code> method should\nbe made.\nIf there already was an active Scene, its <code>onStop<\/code> method may be called.<\/li>\n<li>Scenes must be destroyed.\nIf a Scene has served its purpose in the Navigator, a call to its <code>onDestroy<\/code>\nmethod must be made.\nIf the Scene was active at this point, a call to its <code>onStop<\/code> method <em>must be\nmade before<\/em> the call to the <code>onDestroy<\/code> method.<\/li>\n<li>Scenes follow the Navigator lifecycle.\nIf a Navigator enters its 'stopped' state, all of its Scene should enter their\n'stopped' state as well.\nIf a Navigator is destroyed, Scenes must be destroyed as well following their\nlifecycle.<\/li>\n<\/ul>\n<p>These guidelines are just that: guidelines.\nIf it makes sense for your Navigator to deviate from them, please do.\nJust make sure you understand the consequences if you do.<\/p>\n"
              }]
            }}
          },
          "about": {
            "ownKey": "about",
            "ownPages": [{
              "reference": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "about",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/about"
              },
              "next": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "interface",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/interface"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "navigators",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators"
              },
              "description": "",
              "title": "About Navigators",
              "content": "<p>Usually in a mobile application, the user can navigate from one screen to\nanother.\nThe <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> interface provides a way to handle\nflow through an application.\nInstead of <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scenes<\/a> determining the next destination in\nthe application by themselves, the Navigator can listen to events a Scene\npublishes and determine\nthe appropriate action to take.<\/p>\n<p>Take for example a simple login screen, where the user enters their username\nand password.\nWhen the user presses the 'log in' button, the application verifies the\ncredentials and navigates to a different screen.\nIn Acorn, the <code>LoginScene<\/code> provides an <code>Events<\/code> interface with a method\n<code>onLoggedIn(User)<\/code>.\nThe Navigator provides an implementation of this interface to the Scene,\nand navigates to the next Scene.<\/p>\n<p>The Navigator in turn has the responsibility to let interested parties know that\nthe active Scene has changed.\nThis way the UI layer can react to a Scene change and show the proper UI.<\/p>\n<h3 id=\"lifecycle\">Lifecycle<\/h3>\n<p>Like Scenes, Navigators also have lifecycles.\nMost often these are used to control the Scene lifecycle, but a Navigator\nimplementation can also choose to hook into this lifecycle itself.<\/p>\n<p>The Navigator's lifecycle is  similar to that of Scenes: they can be 'started',\n'stopped' and 'destroyed':<\/p>\n<ul>\n<li>'stopped ' : The Navigator is dormant, waiting to become active or to be\ndestroyed. A change in its Scenes is not propagated to its\nlisteners.<\/li>\n<li>'started'  : The Navigator is currently active, and changes in scenery are\npropagated to the listeners.<\/li>\n<li>'destroyed': The Navigator is destroyed and will not become active anymore.<\/li>\n<\/ul>\n<p>During the lifetime of a Navigator it can go from 'stopped' to 'started' and\nvice versa multiple times, until it reaches the 'destroyed' state.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Navigator<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStart<\/span><span class=\"p\">()<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStop<\/span><span class=\"p\">()<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onDestroy<\/span><span class=\"p\">()<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<h3 id=\"state-modelling\">State modelling<\/h3>\n<p>Navigator implementations are free to choose how they implement their internal\nstate.\nFor example, it could use a structure like a stack to provide functionality\nsimilar to a back stack, or it could use a state machine for the state\nrepresentation.<\/p>\n<p>This freedom that the Navigator gets also means that it is free to choose how\nthe lifecycles of its Scenes behave, as long as it is according to the Scene\nspecification. The order of the Scene's callback methods must honored, and the\nNavigator's lifecycle state must always outlive that of a Scene.\nThis means that a Navigator's Scenes may only be active when the Navigator is\nactive, and no Scenes may be active when the Navigator is inactive.\nFinally, the Scenes must always be properly destroyed when the Navigator is\ndestroyed.<\/p>\n<p>Other than that, the Navigator implementation is free to decide how its Scene's\nlifecycle is structured, and often depends on the strategy that is chosen for\nmodelling the internal state.<\/p>\n<p>A Navigator that uses a stack for its state for example will stop but not\ndestroy the currently active Scene when a new Scene is pushed on the Stack.\nScenes are only destroyed when they're popped off the stack or when the Navigator\nis destroyed.\nA Navigator that merely replaces Scenes without any 'back' behavior will\nimmediately stop and destroy the currently active Scene when a new Scene becomes\nactive.<\/p>\n<h3 id=\"scene-propagation\">Scene propagation<\/h3>\n<p>The Navigator implementation is in control of determining which Scene is active,\nand must propagate it to any listeners.\nThe Navigator interface declares a\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator/Events\">Navigator.Events<\/a> interface that contains\ncallback methods to trigger interested parties.\nThe Navigator interface itself has a method to let these interested parties\nregister themselves:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Navigator<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">addNavigatorEventsListener<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">.<\/span><span class=\"n\">Events<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">DisposableHandle<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"cm\">/*&nbsp;...&nbsp;*/<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">scene<\/span><span class=\"p\">(<\/span><span class=\"n\">scene<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;,<\/span>&nbsp;<span class=\"k\">data<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">TransitionData<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><span class=\"p\">)<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">finished<\/span><span class=\"p\">()<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>If appropriate, the Navigator can invoke the <code>Navigator.Events.scene<\/code> method\nwhen the active Scene changes.<\/p>\n<h3 id=\"reacting-to-scene-events\">Reacting to Scene events<\/h3>\n<p>As mentioned in <a href=\"https://nhaarman.github.io/Acorn/wiki/scenes/about\">About Scenes<\/a>, Scenes may accept callback interfaces to push\nevents to the Navigator.\nThe Navigator implementation can use these callbacks to make an internal state\nchange.\nFor example, assuming there is a base StackNavigator class, we can do the\nfollowing:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyNavigator<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">StackNavigator<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">initialStack<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">listOf<\/span><span class=\"p\">(<\/span><span class=\"n\">MyScene<\/span><span class=\"p\">(<\/span><span class=\"n\">MySceneListener<\/span><span class=\"p\">()))<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">inner<\/span>&nbsp;<span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MySceneListener<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyScene<\/span><span class=\"p\">.<\/span><span class=\"n\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onEvent<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">push<\/span><span class=\"p\">(<\/span><span class=\"n\">MyScene<\/span><span class=\"p\">(<\/span><span class=\"k\">this<\/span><span class=\"p\">))<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<h3 id=\"back-presses\">Back presses<\/h3>\n<p>When the user presses the back button, this can ultimately be viewed as an\nevent, much like regular button presses.\nNavigators can choose to implement the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/OnBackPressListener\">OnBackPressListener<\/a> interface to indicate\nthey're interesting in handling these back presses.\nSince the Activity is the entry point for back presses, it should delegate\nthis request first to the Navigator if possible.\nThe Navigator can use this event to make a transition in its internal state.<\/p>\n<h3 id=\"navigator-results\">Navigator results<\/h3>\n<p>A Navigator implementation can also provide a callback interface to publish\nresults.\nThis is useful for example when creating a login flow: the user can be guided\nthrough several Scenes, after which the Navigator finishes with an auth token\nresult.<\/p>\n<p>There are two ways to implement callbacks for Navigator results.\nThe first is similar to the way this is implemented for Scenes, by passing a\ncallback to the Navigator constructor:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">listener<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Events<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">,<\/span>&nbsp;<span class=\"n\">MyScene<\/span><span class=\"p\">.<\/span><span class=\"n\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"cm\">/*&nbsp;...&nbsp;*/<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onAuthToken<\/span><span class=\"p\">(<\/span><span class=\"n\">authToken<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">listener<\/span><span class=\"p\">.<\/span><span class=\"n\">onResult<\/span><span class=\"p\">(<\/span><span class=\"n\">authToken<\/span><span class=\"p\">)<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">onResult<\/span><span class=\"p\">(<\/span><span class=\"n\">authToken<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">)<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>There are cases however where the Activity is interested in the Navigator's\nresult, to be able to call <code>Activity.setResult<\/code> and finish.\nSince the Navigator should outlive the Activity, the Activity must be able to\nregister itself as a listener to the Navigator.\nThis can be done by keeping a list of interested listeners:<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyNavigator<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">,<\/span>&nbsp;<span class=\"n\">MyScene<\/span><span class=\"p\">.<\/span><span class=\"n\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">var<\/span>&nbsp;<span class=\"py\">listeners<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">listOf<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">Events<\/span><span class=\"p\">&gt;()<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">register<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Events<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">listeners<\/span>&nbsp;<span class=\"p\">+=<\/span>&nbsp;<span class=\"n\">listener<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">remove<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Events<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">listeners<\/span>&nbsp;<span class=\"p\">-=<\/span>&nbsp;<span class=\"n\">listener<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"cm\">/*&nbsp;...&nbsp;*/<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onAuthToken<\/span><span class=\"p\">(<\/span><span class=\"n\">authToken<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">listeners<\/span><span class=\"p\">.<\/span><span class=\"n\">forEach<\/span>&nbsp;<span class=\"p\">{<\/span>&nbsp;<span class=\"n\">it<\/span><span class=\"p\">.<\/span><span class=\"n\">onResult<\/span><span class=\"p\">(<\/span><span class=\"n\">authToken<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onResult<\/span><span class=\"p\">(<\/span><span class=\"n\">authToken<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">)<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<h3 id=\"saving-and-restoring-state\">Saving and restoring state<\/h3>\n<p>Just like Scenes, Navigator instances need to be able to have their state saved\nas well, and must be able to be restored from this saved state.\nNavigators that save their state must also save the states of the Scenes they\nare hosting.\nThis means that the Navigator instance is responsible for the restoration of the\nScenes as well.<\/p>\n<p>Depending on the chosen strategy for modelling the internal navigation state,\nthe Navigator must be able to restore one or more of its Scenes and restore its\ninternal state as well.<\/p>\n<h3 id=\"navigator-composition\">Navigator composition<\/h3>\n<p>The power behind the Navigator interface is that instances can be composed\ntogether.\nAn application may for example have several flows that make up the entire\napplication flow.\nThese flows can all be implemented using their own Navigator implementations,\nand then tied together using a composing Navigator.<\/p>\n<p>These composing Navigators can decide their internal state just as the 'normal'\nNavigators, which means that you can create a Navigator implementation that can\npush and pop other Navigators on and off a stack.<\/p>\n<h2 id=\"advanced-topics\">Advanced topics<\/h2>\n<p>Usually you don't need to implement the Navigator interface directly; you can\nuse the existing base classes to compose the behavior you need.\nHowever if you do choose to implement your own Navigator, you might want to have\na look at <a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/advanced/scene_management\">Scene Management<\/a>.<\/p>\n"
            }]
          },
          "composing_implementations": {
            "ownKey": "composing_implementations",
            "ownPages": [{
              "reference": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "composing_implementations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/composing_implementations"
              },
              "next": {
                "path": "wiki/navigators/advanced",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "scene_management",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/advanced/scene_management"
              },
              "previous": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "base_implementations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/base_implementations"
              },
              "description": "",
              "title": "Composing implementations",
              "content": "<p>One of the strengths of <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigators<\/a> is that they can\nbe composed into a larger structure.\nThis allows for modular and reusable blocks in your application.\nWhen composing Navigators, you have the same freedom as you have with regular\nNavigators which means that you can choose your own internal model to represent\nthe state.<\/p>\n<p>When composing Navigators, you usually create a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> that exclusively deals\nwith other Navigator instances directly, instead of mixing Scenes and Navigators\ntogether.<\/p>\n<p>The base implementations below show an overview of the default composite\nNavigator classes.<\/p>\n<h3 id=\"compositereplacingnavigator1\"><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/CompositeReplacingNavigator\">CompositeReplacingNavigator<\/a><sup>1<\/sup><\/h3>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/CompositeReplacingNavigator\">CompositeReplacingNavigator<\/a> class is the composite version\nof the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/ReplacingNavigator\">ReplacingNavigator<\/a>, and can switch between several child\nnavigators.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyCompositeNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">CompositeReplacingNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">initialNavigator<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Navigator<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyFirstNavigator<\/span><span class=\"p\">()<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onEvent<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">replace<\/span><span class=\"p\">(<\/span><span class=\"n\">MySecondNavigator<\/span><span class=\"p\">())<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">instantiateNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">navigatorClass<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">KClass<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">&lt;*&gt;&gt;,<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">state<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"k\">when<\/span><span class=\"p\">(<\/span><span class=\"n\">navigatorClass<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MyFirstNavigator<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MyFirstNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MySecondNavigator<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MySecondNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else<\/span>&nbsp;<span class=\"p\">-&gt;<\/span>&nbsp;<span class=\"n\">error<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Unknown&nbsp;navigator&nbsp;class:&nbsp;$navigatorClass&quot;<\/span><span class=\"p\">)<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<h3 id=\"compositestacknavigator1\"><a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/CompositeStackNavigator\">CompositeStackNavigator<\/a><sup>1<\/sup><\/h3>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/CompositeStackNavigator\">CompositeStackNavigator<\/a> class is the composite version of\nthe <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator\">StackNavigator<\/a>, and uses a stack to model its internal state.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyCompositeNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">CompositeStackNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">initialStack<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">List<\/span><span class=\"p\">&lt;<\/span><span class=\"n\">Navigator<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">listOf<\/span><span class=\"p\">(<\/span><span class=\"n\">MyFirstNavigator<\/span><span class=\"p\">())<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onEvent<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">push<\/span><span class=\"p\">(<\/span><span class=\"n\">MySecondNavigator<\/span><span class=\"p\">())<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">instantiateNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">navigatorClass<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">KClass<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">&lt;*&gt;&gt;,<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">state<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"k\">when<\/span><span class=\"p\">(<\/span><span class=\"n\">navigatorClass<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MyFirstNavigator<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MyFirstNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MySecondNavigator<\/span><span class=\"o\">::<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"err\">-&gt;&nbsp;<\/span><span class=\"nc\">MySecondNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">)<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else<\/span>&nbsp;<span class=\"p\">-&gt;<\/span>&nbsp;<span class=\"n\">error<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Unknown&nbsp;navigator&nbsp;class:&nbsp;$navigatorClass&quot;<\/span><span class=\"p\">)<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<hr />\n<p>1: This class is available in the <code>ext-acorn<\/code> artifact.<\/p>\n"
            }]
          },
          "interface": {
            "ownKey": "interface",
            "ownPages": [{
              "reference": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "interface",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/interface"
              },
              "next": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "state_saving",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/state_saving"
              },
              "previous": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "about",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/about"
              },
              "description": "",
              "title": "The Navigator interface",
              "content": "<p>Just as with Scenes, you can implement the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> interface\nto create your own Navigator.\nThis time however, this is actually discouraged: it can be tricky to properly\ndeal with managing the different lifecycles.\nThere are a couple of excellent base classes available however that provide most\nof the basic implementations you'll need.\nIf you still need to implement your own Navigator, have a look at\n<a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/advanced/scene_management\">Scene Management<\/a>.<\/p>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> interface describes the basic functionality for a\nNavigator.\nIt provides several lifecycle describing methods, and allows interested parties\nto register themselves to be notified of <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a> changes.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Navigator<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStart<\/span><span class=\"p\">()<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onStop<\/span><span class=\"p\">()<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">onDestroy<\/span><span class=\"p\">()<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">isDestroyed<\/span><span class=\"p\">():<\/span>&nbsp;<span class=\"n\">Boolean<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">addNavigatorEventsListener<\/span><span class=\"p\">(<\/span><span class=\"n\">listener<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Navigator<\/span><span class=\"p\">.<\/span><span class=\"n\">Events<\/span><span class=\"p\">):<\/span>&nbsp;<span class=\"n\">DisposableHandle<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">interface<\/span>&nbsp;<span class=\"nc\">Events<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">scene<\/span><span class=\"p\">(<\/span><span class=\"n\">scene<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">Scene<\/span><span class=\"p\">&lt;<\/span><span class=\"k\">out<\/span>&nbsp;<span class=\"n\">Container<\/span><span class=\"p\">&gt;,<\/span>&nbsp;<span class=\"k\">data<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">TransitionData<\/span><span class=\"p\">?<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"k\">null<\/span><span class=\"p\">)<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">finished<\/span><span class=\"p\">()<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>The first three methods describe the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a>'s lifecycle:<\/p>\n<ul>\n<li><code>onStart()<\/code>: Called when the Navigator is started;<\/li>\n<li><code>onStop()<\/code>: Called when the Navigator is stopped;<\/li>\n<li><code>onDestroy()<\/code>: Called when the Navigator gets destroyed;<\/li>\n<\/ul>\n<p>As a user of one of the base classes mentioned above you usually won't have to\noverride these methods, although you can hook into them when you need it.<\/p>\n<p>The <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator/Events\">Navigator.Events<\/a> interface can be implemented to\nget notifications of Scene changes.<\/p>\n"
            }]
          },
          "state_saving": {
            "ownKey": "state_saving",
            "ownPages": [{
              "reference": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "state_saving",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/state_saving"
              },
              "next": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "base_implementations",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/base_implementations"
              },
              "previous": {
                "path": "wiki/navigators",
                "baseUrl": "https://nhaarman.github.io/Acorn",
                "fileName": "interface",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://nhaarman.github.io/Acorn/wiki/navigators/interface"
              },
              "description": "",
              "title": "Saving state",
              "content": "<p>By default, a <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> does not support state saving, although\neach of the base implementations below do.<\/p>\n<p>To support <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> state saving, it can implement the\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SavableNavigator\">SavableNavigator<\/a> interface.\nIn this method, the Navigator implementation must include everything necessary\nto be able to reconstruct itself from a serialized state.\nThis includes the Navigator's own internal state, but also that of its\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scenes<\/a>.\nWhen using one of the base implementations this is done mostly for you, but you\ncan also choose to override the <code>saveInstanceState<\/code> method to include your own\ndata.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"k\">class<\/span>&nbsp;<span class=\"nc\">MyNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">private<\/span>&nbsp;<span class=\"k\">val<\/span>&nbsp;<span class=\"py\">userId<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">String<\/span><span class=\"p\">,<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">?<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">SingleSceneNavigator<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">override<\/span>&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">saveInstanceState<\/span><span class=\"p\">()<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"k\">super<\/span><span class=\"p\">.<\/span><span class=\"n\">saveInstanceState<\/span><span class=\"p\">().<\/span><span class=\"n\">also<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">it<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;user_id&quot;<\/span><span class=\"p\">]<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">userId<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">companion<\/span>&nbsp;<span class=\"k\">object<\/span>&nbsp;<span class=\"err\">{<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">fun<\/span>&nbsp;<span class=\"nf\">from<\/span><span class=\"p\">(<\/span><span class=\"n\">savedState<\/span><span class=\"p\">:<\/span>&nbsp;<span class=\"n\">NavigatorState<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">:<\/span>&nbsp;<span class=\"n\">MyNavigator<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">MyNavigator<\/span><span class=\"p\">(<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">userId<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">savedState<\/span><span class=\"p\">[<\/span><span class=\"s\">&quot;user_id&quot;<\/span><span class=\"p\">],<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">savedState<\/span>&nbsp;<span class=\"p\">=<\/span>&nbsp;<span class=\"n\">savedState<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">)<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n<p>This snippet uses an existing <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SingleSceneNavigator\">SingleSceneNavigator<\/a> class which\nimplements the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/SavableNavigator\">SavableNavigator<\/a> interface.\nWhen the Navigator needs to have its state saved, the implementation hooks into\nthe <code>saveInstanceState()<\/code> method and includes the <code>userId<\/code> in the resulting state.<\/p>\n<p>Similarly when restoring the Navigator, it uses a previously saved state to\nretrieve the value of the <code>userId<\/code>.<\/p>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "navigators",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/navigators"
          },
          "next": {
            "path": "wiki/navigators",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "about",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/navigators/about"
          },
          "previous": {
            "path": "wiki/scenes",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "base_implementations",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/scenes/base_implementations"
          },
          "description": "",
          "title": "Navigators",
          "content": "<p>Navigators are the glue that ties everything together.\nThey can provide a specific flow in the application built up of several Scenes,\nor combine multiple specific flows into one larger flow.<\/p>\n<p>On these pages you can find out all about Navigators:<\/p>\n<ul>\n<li><a href=\"navigators/about\">About Navigators<\/a><\/li>\n<li><a href=\"navigators/interface\">The Navigator interface<\/a><\/li>\n<li><a href=\"navigators/state_saving\">Saving state<\/a><\/li>\n<li><a href=\"navigators/base_implementations\">Base implementations<\/a><\/li>\n<li><a href=\"navigators/composing_implementations\">Composing implementations<\/a><\/li>\n<li>Advanced\n<ul>\n<li><a href=\"navigators/advanced/scene_management\">Scene Management<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n"
        }]
      },
      "experimental": {
        "ownKey": "experimental",
        "childrenPages": {"concurrentpairnavigator": {
          "ownKey": "concurrentpairnavigator",
          "ownPages": [{
            "reference": {
              "path": "wiki/experimental",
              "baseUrl": "https://nhaarman.github.io/Acorn",
              "fileName": "concurrentpairnavigator",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://nhaarman.github.io/Acorn/wiki/experimental/concurrentpairnavigator"
            },
            "previous": {
              "path": "wiki",
              "baseUrl": "https://nhaarman.github.io/Acorn",
              "fileName": "experimental",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://nhaarman.github.io/Acorn/wiki/experimental"
            },
            "description": "",
            "title": "ConcurrentPairNavigator",
            "content": "<p>The <a href=\"https://nhaarman.github.io/Acorn/wiki/experimental/concurrentpairnavigator\">ConcurrentPairNavigator<\/a> is a stacking\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/Navigator\">Navigator<\/a> that allows up to two\n<a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scenes<\/a> in its stack.\nWhenever a second Scene is stacked upon the initial Scene, both the initial\nScene and the second Scene will <em>simultaneously<\/em> be in their 'started' states,\nhereby differing from navigators such as the <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/navigation/StackNavigator\">StackNavigator<\/a>\nwhich only allow a single Scene in the 'started' state.<\/p>\n<p>This Navigator can come in useful when implementing complex overlays that\nwarrant their own Scene instance:<\/p>\n<p class=\"image-preview\"><img src=\"\" alt=\"\" /><\/p>\n<p class=\"image-preview\"><img src=\"media/scene_lifecycle.png\" alt=\"\" /><\/p>\n<p class=\"image-preview\"><img src=\"wiki/experimental/media/scene_lifecycle.png\" alt=\"manage panel\" /><\/p>\n"
          }]
        }},
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "experimental",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/experimental"
          },
          "next": {
            "path": "wiki/experimental",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "concurrentpairnavigator",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/experimental/concurrentpairnavigator"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "getting_started",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/getting_started"
          },
          "description": "",
          "title": "Experimental",
          "content": "<p>Acorn includes a couple of features that are considered experimental.\nThey bring certain APIs to Acorn that have yet to prove themselves.\nThese features live in a separate artifact,\n<code>com.nhaarman.acorn.ext:acorn-experimental<\/code>.<\/p>\n<p>Currently, there are the following experimental features:<\/p>\n<ul>\n<li><a href=\"experimental/concurrentpairnavigator\">ConcurrentPairNavigator<\/a><\/li>\n<\/ul>\n"
        }]
      },
      "userinterface": {
        "ownKey": "userinterface",
        "childrenPages": {"about": {
          "ownKey": "about",
          "ownPages": [{
            "reference": {
              "path": "wiki/userinterface",
              "baseUrl": "https://nhaarman.github.io/Acorn",
              "fileName": "about",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://nhaarman.github.io/Acorn/wiki/userinterface/about"
            },
            "next": {
              "path": "wiki",
              "baseUrl": "https://nhaarman.github.io/Acorn",
              "fileName": "setup",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://nhaarman.github.io/Acorn/wiki/setup"
            },
            "previous": {
              "path": "wiki",
              "baseUrl": "https://nhaarman.github.io/Acorn",
              "fileName": "userinterface",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://nhaarman.github.io/Acorn/wiki/userinterface"
            },
            "description": "",
            "title": "The User Interface",
            "content": "<p>The user interface provides the bridge between the user interacting with the\ndevice and your application code.\nIt is typically implemented in a very platform specific manner using classes\nprovided by the platform.<\/p>\n<p>At this point it is already a common practice to project your application code\nfrom the platform specific view code: logic is separated into different classes\nto provide a clear boundary between the application logic and the view.<\/p>\n<p>In Acorn, the entire platform acts as a plugin to your application.\nInstead of depending on the Android platform to provide Activities or Fragments\nso you can start your logic, Acorn lets you view the Activity as a 'window' into\nyour application.\nRegardless of whether the Activity showing your application is currently in the\nforeground or in the background, or whether the user rotates the device or\nchanges the system language, your application and navigational state will just\nkeep running until the OS decides to kill the app.<\/p>\n<p>To be able to do this, Acorn lets the Activity subscribe to changes in the\nnavigational state, and make it its sole responsibility to provide the user\ninterface.\nUpon starting the Activity the Activity will receive the current navigational\nstate from Acorn, display the proper user interface and attach it to the\ncurrently Active <a href=\"https://nhaarman.github.io/Acorn/com/nhaarman/acorn/presentation/Scene\">Scene<\/a>.\nWhen the Activity disappears, albeit due to the user navigating to another\napplication or rotating the device, it detaches the user interface from the\nScene and stops listening to the navigational state.<\/p>\n<p>A couple of basic use cases should be able to demonstrate the simplicity of\nthis.\nIn the GIFs below, an Activity registers itself with a Navigator, which provides\nthe Activity with a screen (the green S).\nThe Activity has a reference to its layout, in which it can inflate and place\nviews (V).\nWhenever a screen becomes orange, it is being replaced; whenever an Activity\nbecomes red, it is stopped.<\/p>\n<h3 id=\"a-new-activity-instance\">A new Activity instance<\/h3>\n<p>When starting an application, the Android system launches a new Activity\ninstance that can be used to host the UI.\nIn our case, it registers a listener with our Navigator.\nIt will receive the current active screen and inflate the layout for it.\nFinally, it will attach the layout to the active screen so it can start\ndisplaying data.<\/p>\n<p><img src=\"./new_activity.gif\" alt=\"\" /><\/p>\n<!--{.image-preview}-->\n<h3 id=\"changing-the-active-scene\">Changing the active scene<\/h3>\n<p>When a new screen (say screen <strong>B<\/strong>) becomes active, the Activity detaches the\ncurrent layout from the previous screen <strong>A<\/strong>.\nIt inflates the new layout for screen <strong>B<\/strong>, replaces layout <strong>A<\/strong> with layout\n<strong>B<\/strong> using a suitable transition animation, and attaches the new layout to the\nnewly activated screen.<\/p>\n<!--TODO GIF-->\n<h3 id=\"navigating-away-from-and-returning-to-the-app\">Navigating away from and returning to the app<\/h3>\n<p>When the user navigates away from the application, the application \u2018loses\u2019 its\nwindow to the user.\nThe Activity is stopped and detaches the user interface from the active screen.\nWhen the user returns to the application, the Activity is started again and can\nsimply attach its layout to the active screen again.<\/p>\n<!--TODO GIF-->\n<p>When the user returns to the application after the Activity was destroyed, it\nneeds to inflate the active screen\u2019s layout again and attach it to the screen.\nThis behavior is pretty much the same as our first case \u2018A new Activity\ninstance\u2019.<\/p>\n<!--TODO GIF-->\n<h3 id=\"changing-configurations\">Changing configurations<\/h3>\n<p>When the user rotates the device, enters split screen mode or changes the system\nlanguage, the system will destroy any active Activity instances and recreate\nthem with the new configuration.\nWhen this happens, the original Activity simply detaches its layout from the\nactive screen, and the new Activity inflates the new layout and attaches it to\nthe active screen.\nFrom a screen perspective, changing configurations now simply means switching\nout views.<\/p>\n"
          }]
        }},
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "userinterface",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/userinterface"
          },
          "next": {
            "path": "wiki/userinterface",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "about",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/userinterface/about"
          },
          "previous": {
            "path": "wiki/navigators/advanced",
            "baseUrl": "https://nhaarman.github.io/Acorn",
            "fileName": "scene_management",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://nhaarman.github.io/Acorn/wiki/navigators/advanced/scene_management"
          },
          "description": "",
          "title": "The User Interface",
          "content": "<p>The User Interface<\/p>\n"
        }]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://nhaarman.github.io/Acorn",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://nhaarman.github.io/Acorn/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": "<html>\n <head><\/head>\n <body>\n  <ul> \n   <li><a href=\"https://nhaarman.github.io/Acorn/wiki/scenes\">Scenes<\/a> \n    <ul> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/scenes/about\">About Scenes<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/scenes/interface\">The Scene interface<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/scenes/state_saving\">Saving state<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/scenes/base_implementations\">Base implementations<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://nhaarman.github.io/Acorn/wiki/navigators\">Navigators<\/a> \n    <ul> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/about\">About Navigators<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/interface\">The Navigator interface<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/state_saving\">Saving state<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/base_implementations\">Base implementations<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/composing_implementations\">Composing implementations<\/a><\/li> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/navigators/advanced/scene_management\">Scene management<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://nhaarman.github.io/Acorn/wiki/userinterface\">The User Interface<\/a> \n    <ul> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/userinterface/about\">About<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://nhaarman.github.io/Acorn/wiki/setup\">Setup<\/a><\/li> \n   <li><a href=\"https://nhaarman.github.io/Acorn/wiki/getting_started\">Getting started<\/a><\/li> \n   <li><a href=\"https://nhaarman.github.io/Acorn/wiki/experimental\">Experimental<\/a> \n    <ul> \n     <li><a href=\"https://nhaarman.github.io/Acorn/wiki/experimental/concurrentpairnavigator\">ConcurrentPairNavigator<\/a><\/li> \n    <\/ul> <\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
    }]
  }}
}